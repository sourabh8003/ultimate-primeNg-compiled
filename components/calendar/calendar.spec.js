"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var testing_1 = require("@angular/core/testing");
var platform_browser_1 = require("@angular/platform-browser");
var calendar_1 = require("./calendar");
var animations_1 = require("@angular/platform-browser/animations");
var button_1 = require("../button/button");
var forms_1 = require("@angular/forms");
var shared_1 = require("../common/shared");
var core_1 = require("@angular/core");
describe('Calendar', function () {
    var calendar;
    var fixture;
    beforeEach(function () {
        testing_1.TestBed.configureTestingModule({
            schemas: [core_1.NO_ERRORS_SCHEMA],
            imports: [
                animations_1.NoopAnimationsModule,
                forms_1.FormsModule,
                shared_1.SharedModule,
                button_1.ButtonModule
            ],
            declarations: [
                calendar_1.Calendar,
            ]
        });
        fixture = testing_1.TestBed.createComponent(calendar_1.Calendar);
        calendar = fixture.componentInstance;
    });
    it('should created by default', function () {
        fixture.detectChanges();
        var calenderEl = fixture.debugElement.query(platform_browser_1.By.css('span'));
        expect(calenderEl).toBeTruthy();
    });
    it('should change styleClass', function () {
        calendar.styleClass = "Primeng ROCKS!";
        fixture.detectChanges();
        var calenderEl = fixture.debugElement.query(platform_browser_1.By.css('span'));
        expect(calenderEl.nativeElement.className).toContain("Primeng ROCKS!");
    });
    it('should change inputStyleClass', function () {
        calendar.inputStyleClass = "Primeng ROCKS!";
        fixture.detectChanges();
        var calenderEl = fixture.debugElement.query(platform_browser_1.By.css('input'));
        expect(calenderEl.nativeElement.className).toContain("Primeng ROCKS!");
    });
    it('should change panelStyle and panelStyleClass', function () {
        calendar.panelStyleClass = "Primeng ROCKS!";
        calendar.panelStyle = { 'primeng': 'rocks!' };
        calendar.overlayVisible = true;
        fixture.detectChanges();
        var panelEl = fixture.debugElement.query(platform_browser_1.By.css('div'));
        expect(panelEl.nativeElement.className).toContain("Primeng ROCKS!");
        expect(panelEl.nativeElement.style.primeng).toContain("rocks!");
    });
    it('should change inputId', function () {
        calendar.inputId = "PRIMENG";
        fixture.detectChanges();
        var calenderEl = fixture.debugElement.query(platform_browser_1.By.css('input'));
        expect(calenderEl.nativeElement.id).toContain("PRIMENG");
    });
    it('should change name', function () {
        calendar.name = "PRIMENG";
        fixture.detectChanges();
        var calenderEl = fixture.debugElement.query(platform_browser_1.By.css('input'));
        expect(calenderEl.nativeElement.name).toContain("PRIMENG");
    });
    it('should change placeholder', function () {
        calendar.placeholder = "PRIMENG";
        fixture.detectChanges();
        var calenderEl = fixture.debugElement.query(platform_browser_1.By.css('input'));
        expect(calenderEl.nativeElement.placeholder).toContain("PRIMENG");
    });
    it('should show icon', function () {
        calendar.showIcon = true;
        fixture.detectChanges();
        var calenderEl = fixture.debugElement.query(platform_browser_1.By.css('span'));
        var buttonEl = fixture.debugElement.query(platform_browser_1.By.css('button'));
        expect(calenderEl.nativeElement.className).toContain('ui-calendar-w-btn');
        expect(buttonEl.nativeElement.attributes[6].value).toEqual("pi pi-calendar");
    });
    it('should change icon', function () {
        calendar.showIcon = true;
        calendar.icon = "Primeng ROCKS!";
        fixture.detectChanges();
        var buttonEl = fixture.debugElement.query(platform_browser_1.By.css('button'));
        expect(buttonEl.nativeElement.attributes[6].value).toEqual("Primeng ROCKS!");
    });
    it('should show panel and call onInputClick when inputClick', function () {
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var itemClickSpy = spyOn(calendar, 'onInputClick').and.callThrough();
        var focusSpy = spyOn(calendar, 'onInputFocus').and.callThrough();
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var panelEl = fixture.debugElement.query(platform_browser_1.By.css('div'));
        expect(itemClickSpy).toHaveBeenCalled();
        expect(focusSpy).toHaveBeenCalled();
        expect(panelEl).toBeTruthy();
        expect(calendar.overlayVisible).toEqual(true);
    });
    it('should show panel and call onButtonClick', function () {
        calendar.showIcon = true;
        fixture.detectChanges();
        var buttonEl = fixture.debugElement.query(platform_browser_1.By.css('button')).nativeElement;
        var onButtonClickSpy = spyOn(calendar, 'onButtonClick').and.callThrough();
        buttonEl.click();
        fixture.detectChanges();
        var panelEl = fixture.debugElement.query(platform_browser_1.By.css('div'));
        expect(panelEl).toBeTruthy();
        expect(calendar.overlayVisible).toEqual(true);
        expect(onButtonClickSpy).toHaveBeenCalled();
        expect(panelEl.nativeElement.className).toContain('ui-shadow');
    });
    it('should show panel', function () {
        calendar.inline = true;
        fixture.detectChanges();
        var panelEl = fixture.debugElement.query(platform_browser_1.By.css('div'));
        expect(panelEl).toBeTruthy();
        expect(panelEl.nativeElement.className).toContain('ui-datepicker-inline');
    });
    it('should spanish', function () {
        var createWeekDaysSpy = spyOn(calendar, 'createWeekDays').and.callThrough();
        var createMonthsSpy = spyOn(calendar, 'createMonths').and.callThrough();
        calendar.locale = {
            firstDayOfWeek: 1,
            dayNames: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
            dayNamesShort: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
            dayNamesMin: ["D", "L", "M", "X", "J", "V", "S"],
            monthNames: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"],
            monthNamesShort: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"],
            today: 'Hoy',
            clear: 'Borrar'
        };
        fixture.detectChanges();
        expect(createWeekDaysSpy).toHaveBeenCalled();
        expect(createMonthsSpy).toHaveBeenCalled();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var firstDayEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-month'));
        expect(firstDayEl.nativeElement.textContent).toEqual(calendar.locale.monthNames[calendar.currentMonth]);
    });
    it('should change locale (view month)', function () {
        var createMonthPickerValuesSpy = spyOn(calendar, 'createMonthPickerValues').and.callThrough();
        calendar.view = "month";
        calendar.locale = {
            firstDayOfWeek: 1,
            dayNames: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
            dayNamesShort: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
            dayNamesMin: ["D", "L", "M", "X", "J", "V", "S"],
            monthNames: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"],
            monthNamesShort: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"],
            today: 'Hoy',
            clear: 'Borrar'
        };
        fixture.detectChanges();
        expect(createMonthPickerValuesSpy).toHaveBeenCalled();
    });
    it('should select next month and call navForward', function () {
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        var currentMonth = calendar.currentMonth;
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var navForwardSpy = spyOn(calendar, 'navForward').and.callThrough();
        var monthEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-month'));
        expect(monthEl.nativeElement.textContent).toEqual(calendar.locale.monthNames[calendar.currentMonth]);
        var nextMonthEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-next'));
        nextMonthEl.nativeElement.click();
        fixture.detectChanges();
        var currentMonthEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-month'));
        expect(currentMonth).not.toEqual(calendar.currentMonth);
        expect(currentMonthEl.nativeElement.textContent).toEqual(calendar.locale.monthNames[calendar.currentMonth]);
        expect(navForwardSpy).toHaveBeenCalled();
    });
    it('should select pre month and call navBackward', function () {
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        var currentMonth = calendar.currentMonth;
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var navBackwardSpy = spyOn(calendar, 'navBackward').and.callThrough();
        var monthEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-month'));
        expect(monthEl.nativeElement.textContent).toEqual(calendar.locale.monthNames[calendar.currentMonth]);
        var preMonthEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-prev'));
        preMonthEl.nativeElement.click();
        fixture.detectChanges();
        var currentMonthEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-month'));
        expect(currentMonth).not.toEqual(calendar.currentMonth);
        expect(currentMonthEl.nativeElement.textContent).toEqual(calendar.locale.monthNames[calendar.currentMonth]);
        expect(navBackwardSpy).toHaveBeenCalled();
    });
    it('should select date when click', testing_1.fakeAsync(function () {
        var date = new Date(2017, 8, 23);
        calendar.defaultDate = date;
        jasmine.clock().mockDate(date);
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var onDateSelectSpy = spyOn(calendar, 'onDateSelect').and.callThrough();
        var calendarContainer = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-calendar-container'));
        var sampleDateEls = calendarContainer.queryAll(platform_browser_1.By.css('a'));
        expect(calendar.dateTemplate).toBeFalsy();
        sampleDateEls[7].nativeElement.click();
        fixture.detectChanges();
        var datesEl = calendarContainer.queryAll(platform_browser_1.By.css('a'));
        var selectedTdEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-current-day'));
        expect(calendar.inputFieldValue).toEqual(inputEl.value);
        var i = 1;
        for (var _i = 0, sampleDateEls_1 = sampleDateEls; _i < sampleDateEls_1.length; _i++) {
            var date_1 = sampleDateEls_1[_i];
            expect(date_1.nativeElement.textContent).toEqual(i.toString());
            i++;
        }
        expect(onDateSelectSpy).toHaveBeenCalled();
        expect(selectedTdEl).toBeTruthy();
        for (var x = 0; x < datesEl.length; x++) {
            if (x == 7)
                expect(datesEl[x].nativeElement.className).toContain("ui-state-active");
            else
                expect(datesEl[x].nativeElement.className).not.toContain("ui-state-active");
        }
        expect(calendar.isSingleSelection()).toEqual(true);
        testing_1.tick(150);
        expect(calendar.overlayVisible).toEqual(false);
    }));
    it('should change date format', function () {
        calendar.dateFormat = "dd/mm/yy";
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var onDateSelectSpy = spyOn(calendar, 'onDateSelect').and.callThrough();
        var calendarContainer = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-calendar-container'));
        var sampleDateEl = calendarContainer.queryAll(platform_browser_1.By.css('a'))[4].nativeElement;
        sampleDateEl.click();
        fixture.detectChanges();
        expect(calendar.inputFieldValue).toEqual(inputEl.value);
        if (calendar.currentMonth < 9)
            expect(calendar.inputFieldValue).toEqual("05/0" + (calendar.currentMonth + 1) + "/" + calendar.currentYear);
        else
            expect(calendar.inputFieldValue).toEqual("05/" + (calendar.currentMonth + 1) + "/" + calendar.currentYear);
        expect(onDateSelectSpy).toHaveBeenCalled();
    });
    it('should use min and max date', function () {
        var minDate;
        var maxDate;
        var today = new Date();
        var month = today.getMonth();
        var year = today.getFullYear();
        var prevMonth = (month === 0) ? 11 : month - 1;
        var prevYear = (prevMonth === 11) ? year - 1 : year;
        var nextMonth = (month === 11) ? 0 : month + 1;
        var nextYear = (nextMonth === 0) ? year + 1 : year;
        minDate = new Date();
        minDate.setMonth(prevMonth);
        minDate.setFullYear(prevYear);
        maxDate = new Date();
        maxDate.setMonth(nextMonth);
        maxDate.setFullYear(nextYear);
        calendar.minDate = minDate;
        calendar.maxDate = maxDate;
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var nextMonthEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-next'));
        nextMonthEl.nativeElement.click();
        nextMonthEl.nativeElement.click();
        fixture.detectChanges();
        var containerEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-calendar-container'));
        var unselectableEls = containerEl.queryAll(platform_browser_1.By.css('.ui-state-default.ui-state-disabled'));
        expect(unselectableEls).toBeTruthy();
        expect(unselectableEls.length).toBeGreaterThan(30);
    });
    it('should use invalidDates', function () {
        var invalidDates;
        var invalidDate = new Date();
        invalidDate.setDate(15);
        var invalidDate2 = new Date();
        invalidDate2.setDate(invalidDate.getDate() - 1);
        invalidDates = [invalidDate, invalidDate2];
        calendar.disabledDates = invalidDates;
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var containerEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-calendar-container'));
        var unselectableEls = containerEl.queryAll(platform_browser_1.By.css('.ui-state-default.ui-state-disabled'));
        var invalidDateArray = [];
        for (var _i = 0, unselectableEls_1 = unselectableEls; _i < unselectableEls_1.length; _i++) {
            var el = unselectableEls_1[_i];
            if (el.nativeElement.textContent == invalidDate.getDate() || el.nativeElement.textContent == invalidDate2.getDate()) {
                invalidDateArray.push(el.nativeElement.textContent);
            }
        }
        expect(invalidDateArray.length).toEqual(2);
    });
    it('should use disabledays', function () {
        calendar.disabledDays = [0, 6];
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        for (var _i = 0, _a = calendar.months[0].dates; _i < _a.length; _i++) {
            var week = _a[_i];
            expect(week[0].selectable).toEqual(false);
            expect(week[6].selectable).toEqual(false);
        }
    });
    it('should use year and month navigator', function () {
        calendar.yearRange = "2000:2030";
        calendar.monthNavigator = true;
        calendar.yearNavigator = true;
        fixture.detectChanges();
        var onMonthDropdownChangeSpy = spyOn(calendar, 'onMonthDropdownChange').and.callThrough();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var navigators = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-title')).queryAll(platform_browser_1.By.css('select'));
        expect(navigators.length).toEqual(2);
        var monthDropdownEl = navigators[0];
        var yearDropdownEl = navigators[1];
        var event = new Event('change');
        monthDropdownEl.nativeElement.value = "1";
        monthDropdownEl.nativeElement.dispatchEvent(event);
        yearDropdownEl.nativeElement.value = "2019";
        yearDropdownEl.nativeElement.dispatchEvent(event);
        fixture.detectChanges();
        expect(calendar.currentMonth).toEqual(1);
        expect(calendar.currentYear).toEqual(2019);
        var datesContainer = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-calendar-container'));
        var dates = datesContainer.queryAll(platform_browser_1.By.css('a'));
        dates[17].nativeElement.click();
        fixture.detectChanges();
        expect(calendar.inputFieldValue).toEqual("02/18/2019");
        expect(onMonthDropdownChangeSpy).toHaveBeenCalled();
    });
    it('should show time', function () {
        var date = new Date(2017, 8, 23, 15, 12);
        calendar.defaultDate = date;
        jasmine.clock().mockDate(date);
        var updateInputfieldSpy = spyOn(calendar, 'updateInputfield').and.callThrough();
        calendar.yearRange = "2000:2030";
        calendar.showTime = true;
        calendar.monthNavigator = true;
        calendar.yearNavigator = true;
        fixture.detectChanges();
        expect(updateInputfieldSpy).toHaveBeenCalled();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var defaultHour = calendar.currentHour;
        var defaultMinute = calendar.currentMinute;
        var incrementHourSpy = spyOn(calendar, 'incrementHour').and.callThrough();
        var decrementHourSpy = spyOn(calendar, 'decrementHour').and.callThrough();
        var incrementMinuteSpy = spyOn(calendar, 'incrementMinute').and.callThrough();
        var decrementMinuteSpy = spyOn(calendar, 'decrementMinute').and.callThrough();
        var navigators = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-title')).queryAll(platform_browser_1.By.css('select'));
        var timers = fixture.debugElement.query(platform_browser_1.By.css('.ui-timepicker')).queryAll(platform_browser_1.By.css('div'));
        var hourPicker = timers[0];
        var minutePicker = timers[2];
        var incrementHourEl = hourPicker.children[0];
        var decrementHourEl = hourPicker.children[3];
        var incrementMinuteEl = minutePicker.children[0];
        var decrementMinuteEl = minutePicker.children[3];
        var monthDropdownEl = navigators[0];
        var yearDropdownEl = navigators[1];
        var event = new Event('change');
        monthDropdownEl.nativeElement.value = "7";
        monthDropdownEl.nativeElement.dispatchEvent(event);
        yearDropdownEl.nativeElement.value = "2008";
        yearDropdownEl.nativeElement.dispatchEvent(event);
        incrementHourEl.nativeElement.click();
        incrementHourEl.nativeElement.click();
        decrementHourEl.nativeElement.click();
        incrementMinuteEl.nativeElement.click();
        incrementMinuteEl.nativeElement.click();
        decrementMinuteEl.nativeElement.click();
        fixture.detectChanges();
        expect(hourPicker.queryAll(platform_browser_1.By.css('span'))[2].nativeElement.textContent).not.toEqual(defaultHour.toString());
        expect(minutePicker.queryAll(platform_browser_1.By.css('span'))[2].nativeElement.textContent).not.toEqual(defaultMinute.toString());
        expect(hourPicker.queryAll(platform_browser_1.By.css('span'))[2].nativeElement.textContent).toEqual(calendar.currentHour.toString());
        expect(minutePicker.queryAll(platform_browser_1.By.css('span'))[2].nativeElement.textContent).toEqual(calendar.currentMinute.toString());
        expect(calendar.currentMinute).toEqual(13);
        expect(calendar.currentHour).toEqual(16);
        var datesContainer = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-calendar-container'));
        var dates = datesContainer.queryAll(platform_browser_1.By.css('a'));
        dates[7].nativeElement.click();
        fixture.detectChanges();
        expect(incrementHourSpy).toHaveBeenCalled();
        expect(decrementHourSpy).toHaveBeenCalled();
        expect(decrementMinuteSpy).toHaveBeenCalled();
        expect(incrementMinuteSpy).toHaveBeenCalled();
        expect(fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement.value).toEqual(calendar.inputFieldValue);
        if (calendar.currentHour < 10 && calendar.currentMinute < 10)
            expect(calendar.inputFieldValue).toEqual("08/08/2008" + " 0" + calendar.currentHour + ":0" + calendar.currentMinute);
        else if (calendar.currentHour < 10)
            expect(calendar.inputFieldValue).toEqual("08/08/2008" + " 0" + calendar.currentHour + ":" + calendar.currentMinute);
        else if (calendar.currentMinute < 10)
            expect(calendar.inputFieldValue).toEqual("08/08/2008" + " " + calendar.currentHour + ":0" + calendar.currentMinute);
        else
            expect(calendar.inputFieldValue).toEqual("08/08/2008" + " " + calendar.currentHour + ":" + calendar.currentMinute);
    });
    it('should only time', function () {
        calendar.timeOnly = true;
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var spanEl = fixture.debugElement.query(platform_browser_1.By.css('span')).nativeElement;
        var panelEl = fixture.debugElement.query(platform_browser_1.By.css('div')).nativeElement;
        expect(spanEl.className).toContain('ui-calendar-timeonly');
        expect(panelEl.className).toContain('ui-datepicker-timeonly');
        var defaultHour = calendar.currentHour;
        var defaultMinute = calendar.currentMinute;
        var timers = fixture.debugElement.query(platform_browser_1.By.css('.ui-timepicker')).queryAll(platform_browser_1.By.css('div'));
        var hourPicker = timers[0];
        var minutePicker = timers[2];
        var incrementHourEl = hourPicker.children[0];
        var decrementHourEl = hourPicker.children[3];
        var incrementMinuteEl = minutePicker.children[0];
        var decrementMinuteEl = minutePicker.children[3];
        incrementHourEl.nativeElement.click();
        incrementHourEl.nativeElement.click();
        decrementHourEl.nativeElement.click();
        incrementMinuteEl.nativeElement.click();
        incrementMinuteEl.nativeElement.click();
        decrementMinuteEl.nativeElement.click();
        fixture.detectChanges();
        expect(hourPicker.queryAll(platform_browser_1.By.css('span'))[2].nativeElement.textContent).not.toEqual(defaultHour.toString());
        expect(minutePicker.queryAll(platform_browser_1.By.css('span'))[2].nativeElement.textContent).not.toEqual(defaultMinute.toString());
        expect(hourPicker.queryAll(platform_browser_1.By.css('span'))[2].nativeElement.textContent).toEqual(calendar.currentHour.toString());
        expect(minutePicker.queryAll(platform_browser_1.By.css('span'))[2].nativeElement.textContent).toEqual(calendar.currentMinute.toString());
        expect(fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement.value).toEqual(calendar.inputFieldValue);
    });
    it('should select multiple', function () {
        calendar.selectionMode = "multiple";
        calendar.yearRange = "2000:2030";
        calendar.monthNavigator = true;
        calendar.yearNavigator = true;
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var defaultHour = calendar.currentHour;
        var defaultMinute = calendar.currentMinute;
        var navigators = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-title')).queryAll(platform_browser_1.By.css('select'));
        var monthDropdownEl = navigators[0];
        var yearDropdownEl = navigators[1];
        var event = new Event('change');
        monthDropdownEl.nativeElement.value = "7";
        monthDropdownEl.nativeElement.dispatchEvent(event);
        yearDropdownEl.nativeElement.value = "2008";
        yearDropdownEl.nativeElement.dispatchEvent(event);
        fixture.detectChanges();
        var datesContainer = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-calendar-container'));
        var dates = datesContainer.queryAll(platform_browser_1.By.css('a'));
        dates[7].nativeElement.click();
        fixture.detectChanges();
        expect(calendar.overlayVisible).toEqual(true);
        dates[8].nativeElement.click();
        fixture.detectChanges();
        dates[9].nativeElement.click();
        fixture.detectChanges();
        dates[9].nativeElement.click();
        fixture.detectChanges();
        expect(inputEl.value).toEqual(calendar.inputFieldValue);
        expect(calendar.value.length).toEqual(2);
        expect(calendar.inputFieldValue).toEqual("08/08/2008, 08/09/2008");
    });
    it('should select multiple with dataType string', function () {
        calendar.selectionMode = "multiple";
        calendar.dataType = "string";
        calendar.yearRange = "2000:2030";
        calendar.monthNavigator = true;
        calendar.yearNavigator = true;
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var defaultHour = calendar.currentHour;
        var defaultMinute = calendar.currentMinute;
        var navigators = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-title')).queryAll(platform_browser_1.By.css('select'));
        var monthDropdownEl = navigators[0];
        var yearDropdownEl = navigators[1];
        var event = new Event('change');
        monthDropdownEl.nativeElement.value = "7";
        monthDropdownEl.nativeElement.dispatchEvent(event);
        yearDropdownEl.nativeElement.value = "2008";
        yearDropdownEl.nativeElement.dispatchEvent(event);
        fixture.detectChanges();
        var datesContainer = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-calendar-container'));
        var dates = datesContainer.queryAll(platform_browser_1.By.css('a'));
        dates[7].nativeElement.click();
        fixture.detectChanges();
        expect(calendar.overlayVisible).toEqual(true);
        dates[8].nativeElement.click();
        fixture.detectChanges();
        dates[9].nativeElement.click();
        fixture.detectChanges();
        dates[9].nativeElement.click();
        fixture.detectChanges();
        expect(inputEl.value).toEqual(calendar.inputFieldValue);
        expect(calendar.value.length).toEqual(2);
        expect(calendar.inputFieldValue).toEqual("08/08/2008, 08/09/2008");
    });
    it('should select today and clear input with button bar', testing_1.fakeAsync(function () {
        calendar.showButtonBar = true;
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var onClearButtonClickSpy = spyOn(calendar, 'onClearButtonClick').and.callThrough();
        var onTodayButtonClickSpy = spyOn(calendar, 'onTodayButtonClick').and.callThrough();
        var buttonbar = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-buttonbar'));
        var todayButtonEl = buttonbar.queryAll(platform_browser_1.By.css('button'))[0];
        var clearButtonEl = buttonbar.queryAll(platform_browser_1.By.css('button'))[1];
        expect(buttonbar).toBeTruthy();
        expect(todayButtonEl.attributes["ng-reflect-label"]).toEqual(calendar.locale.today);
        expect(clearButtonEl.attributes["ng-reflect-label"]).toEqual(calendar.locale.clear);
        todayButtonEl.nativeElement.click();
        fixture.detectChanges();
        testing_1.tick(150);
        expect(calendar.overlayVisible).toEqual(false);
        expect(calendar.inputFieldValue).toBeTruthy();
        expect(inputEl.value).toEqual(calendar.inputFieldValue);
        expect(onTodayButtonClickSpy).toHaveBeenCalled();
        expect(calendar.value).not.toEqual(null);
        clearButtonEl.nativeElement.click();
        fixture.detectChanges();
        testing_1.tick(150);
        expect(calendar.overlayVisible).toEqual(false);
        expect(calendar.inputFieldValue).toBeFalsy();
        expect(inputEl.value).toEqual('');
        expect(calendar.value).toEqual(null);
        expect(onClearButtonClickSpy).toHaveBeenCalled();
    }));
    it('should change today & clear button styleClass', function () {
        calendar.showButtonBar = true;
        calendar.clearButtonStyleClass = "Primeng ROCKS!";
        calendar.todayButtonStyleClass = "Primeng ROCKS!";
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var buttonbar = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-buttonbar'));
        var todayButtonEl = buttonbar.queryAll(platform_browser_1.By.css('button'))[0];
        var clearButtonEl = buttonbar.queryAll(platform_browser_1.By.css('button'))[1];
        expect(todayButtonEl.nativeElement.className).toContain("Primeng ROCKS!");
        expect(clearButtonEl.nativeElement.className).toContain("Primeng ROCKS!");
    });
    it('should show multiple months', function () {
        calendar.numberOfMonths = 3;
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var panelEl = fixture.debugElement.query(platform_browser_1.By.css('div'));
        var contentEls = fixture.debugElement.queryAll(platform_browser_1.By.css('.ui-datepicker-group'));
        var selectEls = fixture.debugElement.queryAll(platform_browser_1.By.css('select'));
        expect(panelEl.nativeElement.className).toContain("ui-datepicker-multiple-month");
        expect(contentEls.length).toEqual(3);
        expect(selectEls.length).toEqual(0);
    });
    it('should show month picker', testing_1.fakeAsync(function () {
        calendar.view = "month";
        calendar.dateFormat = "mm";
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        var dateViewEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-calendar-container'));
        fixture.detectChanges();
        var onMonthSelectSpy = spyOn(calendar, 'onMonthSelect').and.callThrough();
        var panelEl = fixture.debugElement.query(platform_browser_1.By.css('div')).nativeElement;
        var monthpickerEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-monthpicker'));
        var janEl = monthpickerEl.query(platform_browser_1.By.css('a')).nativeElement;
        expect(monthpickerEl).toBeTruthy();
        expect(panelEl.className).toContain("ui-datepicker-monthpicker");
        expect(janEl.textContent).toContain(calendar.monthPickerValues[0]);
        janEl.click();
        fixture.detectChanges();
        testing_1.tick(200);
        expect(onMonthSelectSpy).toHaveBeenCalled();
        expect(calendar.value).toBeTruthy();
        expect(janEl.className).toContain('ui-state-active');
        expect(calendar.inputFieldValue).toEqual('01');
    }));
    it('should use touchUI', testing_1.fakeAsync(function () {
        calendar.touchUI = true;
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var onOverlayAnimationStartSpy = spyOn(calendar, 'onOverlayAnimationStart').and.callThrough();
        var onDateSelectSpy = spyOn(calendar, 'onDateSelect').and.callThrough();
        var panelEl = fixture.debugElement.query(platform_browser_1.By.css('div')).nativeElement;
        var containerEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-calendar-container'));
        var firstDayEl = containerEl.query(platform_browser_1.By.css('a')).nativeElement;
        expect(panelEl.className).toContain("ui-datepicker-touch-ui");
        firstDayEl.click();
        fixture.detectChanges();
        testing_1.tick(150);
        expect(calendar.overlayVisible).toEqual(false);
        if (calendar.currentMonth < 9)
            expect(calendar.inputFieldValue).toEqual("0" + (calendar.currentMonth + 1) + "/01/" + calendar.currentYear);
        else
            expect(calendar.inputFieldValue).toEqual((calendar.currentMonth + 1) + "/01/" + calendar.currentYear);
        expect(inputEl.value).toEqual(calendar.inputFieldValue);
        expect(onDateSelectSpy).toHaveBeenCalled();
        expect(onOverlayAnimationStartSpy).toHaveBeenCalled();
    }));
    it('should select date with keyboardEvent', function () {
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        calendar.isKeydown = true;
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var updateModelSpy = spyOn(calendar, 'updateModel').and.callThrough();
        var updateUISpy = spyOn(calendar, 'updateUI').and.callThrough();
        var event = { 'target': { 'value': '07/01/2008' } };
        calendar.onUserInput(event);
        fixture.detectChanges();
        var containerEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-calendar-container'));
        var firstEl = containerEl.query(platform_browser_1.By.css('a')).nativeElement;
        var monthSpanEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-month')).nativeElement;
        var yearSpanEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-year')).nativeElement;
        expect(updateUISpy).toHaveBeenCalled();
        expect(updateModelSpy).toHaveBeenCalled();
        expect(calendar.currentMonth).toEqual(6);
        expect(calendar.currentYear).toEqual(2008);
        expect(firstEl.className).toContain("ui-state-active");
        expect(monthSpanEl.textContent).toEqual("July");
        expect(yearSpanEl.textContent).toEqual("2008");
    });
    it('should listen onfocus', function () {
        fixture.detectChanges();
        var focusvalue;
        calendar.onFocus.subscribe(function (value) { return focusvalue = value; });
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        calendar.isKeydown = true;
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        expect(focusvalue).toBeTruthy();
    });
    it('should listen onselect', function () {
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        var onselectValue;
        calendar.onSelect.subscribe(function (value) { return onselectValue = value; });
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var calendarContainer = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-calendar-container'));
        var sampleDateEl = calendarContainer.queryAll(platform_browser_1.By.css('a'))[7].nativeElement;
        sampleDateEl.click();
        fixture.detectChanges();
        expect(onselectValue).toBeTruthy();
    });
    it('should listen onInput', function () {
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        var onInputValue;
        calendar.onInput.subscribe(function (value) { return onInputValue = value; });
        inputEl.click();
        calendar.isKeydown = true;
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var event = { 'target': { 'value': '07/01/2008' } };
        calendar.onUserInput(event);
        fixture.detectChanges();
        expect(onInputValue).toBeTruthy();
    });
    it('should listen onToday and onClear', function () {
        calendar.showButtonBar = true;
        fixture.detectChanges();
        var onTodayValue;
        calendar.onTodayClick.subscribe(function (value) { return onTodayValue = value; });
        var onClearValue;
        calendar.onClearClick.subscribe(function (value) { return onClearValue = value; });
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var buttonbar = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-buttonbar'));
        var todayButtonEl = buttonbar.queryAll(platform_browser_1.By.css('button'))[0];
        var clearButtonEl = buttonbar.queryAll(platform_browser_1.By.css('button'))[1];
        todayButtonEl.nativeElement.click();
        fixture.detectChanges();
        clearButtonEl.nativeElement.click();
        fixture.detectChanges();
        expect(onTodayValue).toBeTruthy();
        expect(onClearValue).toBeTruthy();
    });
    it('should listen onMonthChange', function () {
        fixture.detectChanges();
        var onMonthChangeValue;
        calendar.onMonthChange.subscribe(function (value) { return onMonthChangeValue = value; });
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var nextMonthEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-next'));
        nextMonthEl.nativeElement.click();
        fixture.detectChanges();
        expect(onMonthChangeValue).toBeTruthy();
    });
    it('should listen onYearChange', function () {
        calendar.yearNavigator = true;
        fixture.detectChanges();
        var onYearChangeValue;
        calendar.onYearChange.subscribe(function (value) { return onYearChangeValue = value; });
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var navigators = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-title')).queryAll(platform_browser_1.By.css('select'));
        var yearDropdownEl = navigators[0];
        var event = new Event('change');
        yearDropdownEl.nativeElement.value = "2019";
        yearDropdownEl.nativeElement.dispatchEvent(event);
        fixture.detectChanges();
        expect(onYearChangeValue).toBeTruthy();
    });
    it('should show hourFormat', function () {
        var date = new Date(2018, 9, 23, 15, 12);
        jasmine.clock().mockDate(date);
        fixture.detectChanges();
        calendar.hourFormat = '12';
        calendar.showTime = true;
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-inputtext'));
        var focusEvent = new Event('focus');
        inputEl.nativeElement.click();
        inputEl.nativeElement.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var amPmEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-ampm-picker'));
        var hourPicker = fixture.debugElement.query(platform_browser_1.By.css('.ui-hour-picker'));
        var minutePicker = fixture.debugElement.query(platform_browser_1.By.css('.ui-minute-picker'));
        expect(calendar.pm).toEqual(true);
        expect(amPmEl).toBeTruthy();
        expect(amPmEl.children[1].nativeElement.textContent).toEqual("PM");
        expect(hourPicker.children[2].nativeElement.textContent).toEqual("3");
        expect(hourPicker.children[1].nativeElement.style.display).toEqual("inline");
        expect(minutePicker.children[2].nativeElement.textContent).toEqual("12");
        expect(minutePicker.children[1].nativeElement.style.display).toEqual("none");
    });
    it('should change hourFormat', function () {
        var date = new Date(2018, 9, 23, 11, 12);
        jasmine.clock().mockDate(date);
        fixture.detectChanges();
        calendar.hourFormat = '12';
        calendar.showTime = true;
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-inputtext'));
        var focusEvent = new Event('focus');
        inputEl.nativeElement.click();
        inputEl.nativeElement.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var amPmEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-ampm-picker'));
        var hourPicker = fixture.debugElement.query(platform_browser_1.By.css('.ui-hour-picker'));
        var incrementHour = hourPicker.query(platform_browser_1.By.css('a'));
        var decrementHour = hourPicker.queryAll(platform_browser_1.By.css('a'))[1];
        expect(decrementHour).toBeTruthy();
        expect(incrementHour).toBeTruthy();
        expect(calendar.pm).toEqual(false);
        expect(amPmEl.children[1].nativeElement.textContent).toEqual("AM");
        incrementHour.nativeElement.click();
        fixture.detectChanges();
        expect(calendar.pm).toEqual(true);
        expect(amPmEl.children[1].nativeElement.textContent).toEqual("PM");
        expect(hourPicker.children[2].nativeElement.textContent).toEqual("12");
        decrementHour.nativeElement.click();
        fixture.detectChanges();
        expect(calendar.pm).toEqual(false);
        expect(amPmEl.children[1].nativeElement.textContent).toEqual("AM");
        expect(hourPicker.children[2].nativeElement.textContent).toEqual("11");
    });
    it('should change hourFormat with ampm buttons', function () {
        var date = new Date(2018, 9, 23, 11, 12);
        jasmine.clock().mockDate(date);
        fixture.detectChanges();
        calendar.hourFormat = '12';
        calendar.showTime = true;
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-inputtext'));
        var focusEvent = new Event('focus');
        inputEl.nativeElement.click();
        inputEl.nativeElement.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var amPmEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-ampm-picker'));
        var hourPicker = fixture.debugElement.query(platform_browser_1.By.css('.ui-hour-picker'));
        var minutePicker = fixture.debugElement.query(platform_browser_1.By.css('.ui-minute-picker'));
        var changeFormatEl = amPmEl.query(platform_browser_1.By.css('a'));
        var toggleAMPMSpy = spyOn(calendar, 'toggleAMPM').and.callThrough();
        expect(calendar.pm).toEqual(false);
        expect(amPmEl.children[1].nativeElement.textContent).toEqual("AM");
        changeFormatEl.nativeElement.click();
        fixture.detectChanges();
        expect(calendar.pm).toEqual(true);
        expect(amPmEl.children[1].nativeElement.textContent).toEqual("PM");
        expect(toggleAMPMSpy).toHaveBeenCalled();
        changeFormatEl.nativeElement.click();
        fixture.detectChanges();
        expect(calendar.pm).toEqual(false);
        expect(amPmEl.children[1].nativeElement.textContent).toEqual("AM");
        expect(toggleAMPMSpy).toHaveBeenCalledTimes(2);
    });
    it('should set defaultDate', function () {
        calendar.defaultDate = new Date(2017, 8, 23, 11, 12);
        jasmine.clock().mockDate(new Date(2017, 8, 23, 11, 12));
        calendar.showTime = true;
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-inputtext'));
        var focusEvent = new Event('focus');
        inputEl.nativeElement.click();
        inputEl.nativeElement.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var hourPicker = fixture.debugElement.query(platform_browser_1.By.css('.ui-hour-picker'));
        var minutePicker = fixture.debugElement.query(platform_browser_1.By.css('.ui-minute-picker'));
        var yearEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-year'));
        var monthEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-month'));
        expect(hourPicker.children[2].nativeElement.textContent).toEqual('11');
        expect(minutePicker.children[2].nativeElement.textContent).toEqual('12');
        expect(yearEl.nativeElement.textContent).toEqual("2017");
        expect(monthEl.nativeElement.textContent).toEqual("September");
        expect(calendar.currentMonth).toEqual(8);
        expect(calendar.currentHour).toEqual(11);
        expect(calendar.currentMinute).toEqual(12);
        expect(calendar.currentYear).toEqual(2017);
    });
    it('should show seconds', function () {
        var date = new Date(2017, 8, 23, 11, 12, 21);
        calendar.defaultDate = date;
        jasmine.clock().mockDate(date);
        calendar.showTime = true;
        calendar.showSeconds = true;
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-inputtext'));
        var focusEvent = new Event('focus');
        inputEl.nativeElement.click();
        inputEl.nativeElement.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var seperatorEl = fixture.debugElement.queryAll(platform_browser_1.By.css('.ui-separator'));
        var secondPicker = fixture.debugElement.query(platform_browser_1.By.css('.ui-second-picker'));
        expect(seperatorEl.length).toEqual(2);
        expect(calendar.showSeconds).toBeTruthy();
        expect(seperatorEl[0]).toBeTruthy();
        expect(seperatorEl[1]).toBeTruthy();
        expect(seperatorEl[0].children[1].nativeElement.textContent).toEqual(":");
        expect(seperatorEl[1].children[1].nativeElement.textContent).toEqual(":");
        expect(secondPicker).toBeTruthy();
        expect(secondPicker.children[2].nativeElement.textContent).toEqual('21');
    });
    it('should change seconds', function () {
        var date = new Date(2017, 8, 23, 11, 12, 21);
        calendar.defaultDate = date;
        jasmine.clock().mockDate(date);
        calendar.showTime = true;
        calendar.showSeconds = true;
        fixture.detectChanges();
        var incrementSecondSpy = spyOn(calendar, 'incrementSecond').and.callThrough();
        var decrementSecondSpy = spyOn(calendar, 'decrementSecond').and.callThrough();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-inputtext'));
        var focusEvent = new Event('focus');
        inputEl.nativeElement.click();
        inputEl.nativeElement.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var secondPicker = fixture.debugElement.query(platform_browser_1.By.css('.ui-second-picker'));
        var incrementSecond = secondPicker.query(platform_browser_1.By.css('a'));
        var decrementSecond = secondPicker.queryAll(platform_browser_1.By.css('a'))[1];
        incrementSecond.nativeElement.click();
        fixture.detectChanges();
        expect(secondPicker.children[2].nativeElement.textContent).toEqual('22');
        expect(incrementSecondSpy).toHaveBeenCalled();
        fixture.detectChanges();
        decrementSecond.nativeElement.click();
        fixture.detectChanges();
        expect(secondPicker.children[2].nativeElement.textContent).toEqual('21');
        expect(decrementSecondSpy).toHaveBeenCalled();
    });
    it('should change stepSecond stepHour and stepMinute', function () {
        var date = new Date(2017, 8, 23, 11, 12, 21);
        calendar.defaultDate = date;
        jasmine.clock().mockDate(date);
        calendar.showTime = true;
        calendar.showSeconds = true;
        calendar.stepHour = 2;
        calendar.stepMinute = 2;
        calendar.stepSecond = 2;
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-inputtext'));
        var focusEvent = new Event('focus');
        inputEl.nativeElement.click();
        inputEl.nativeElement.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var secondPicker = fixture.debugElement.query(platform_browser_1.By.css('.ui-second-picker'));
        var incrementSecond = secondPicker.query(platform_browser_1.By.css('a'));
        var decrementSecond = secondPicker.queryAll(platform_browser_1.By.css('a'))[1];
        var hourPicker = fixture.debugElement.query(platform_browser_1.By.css('.ui-hour-picker'));
        var incrementHour = hourPicker.query(platform_browser_1.By.css('a'));
        var decrementHour = hourPicker.queryAll(platform_browser_1.By.css('a'))[1];
        var minutePicker = fixture.debugElement.query(platform_browser_1.By.css('.ui-minute-picker'));
        var incrementMinute = minutePicker.query(platform_browser_1.By.css('a'));
        var decrementMinute = minutePicker.queryAll(platform_browser_1.By.css('a'))[1];
        incrementHour.nativeElement.click();
        incrementMinute.nativeElement.click();
        incrementSecond.nativeElement.click();
        fixture.detectChanges();
        expect(hourPicker.children[2].nativeElement.textContent).toEqual('13');
        expect(minutePicker.children[2].nativeElement.textContent).toEqual('14');
        expect(secondPicker.children[2].nativeElement.textContent).toEqual('23');
        expect(calendar.currentHour).toEqual(13);
        expect(calendar.currentMinute).toEqual(14);
        expect(calendar.currentSecond).toEqual(23);
        decrementHour.nativeElement.click();
        decrementMinute.nativeElement.click();
        decrementSecond.nativeElement.click();
        fixture.detectChanges();
        expect(hourPicker.children[2].nativeElement.textContent).toEqual('11');
        expect(minutePicker.children[2].nativeElement.textContent).toEqual('12');
        expect(secondPicker.children[2].nativeElement.textContent).toEqual('21');
        expect(calendar.currentHour).toEqual(11);
        expect(calendar.currentMinute).toEqual(12);
        expect(calendar.currentSecond).toEqual(21);
    });
    it('should change stepSecond stepHour and stepMinute (out of border values)', function () {
        var date = new Date(2017, 8, 23, 22, 58, 58);
        calendar.defaultDate = date;
        jasmine.clock().mockDate(date);
        calendar.showTime = true;
        calendar.showSeconds = true;
        calendar.stepHour = 5;
        calendar.stepMinute = 5;
        calendar.stepSecond = 5;
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-inputtext'));
        var focusEvent = new Event('focus');
        inputEl.nativeElement.click();
        inputEl.nativeElement.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var secondPicker = fixture.debugElement.query(platform_browser_1.By.css('.ui-second-picker'));
        var incrementSecond = secondPicker.query(platform_browser_1.By.css('a'));
        var decrementSecond = secondPicker.queryAll(platform_browser_1.By.css('a'))[1];
        var hourPicker = fixture.debugElement.query(platform_browser_1.By.css('.ui-hour-picker'));
        var incrementHour = hourPicker.query(platform_browser_1.By.css('a'));
        var decrementHour = hourPicker.queryAll(platform_browser_1.By.css('a'))[1];
        var minutePicker = fixture.debugElement.query(platform_browser_1.By.css('.ui-minute-picker'));
        var incrementMinute = minutePicker.query(platform_browser_1.By.css('a'));
        var decrementMinute = minutePicker.queryAll(platform_browser_1.By.css('a'))[1];
        incrementHour.nativeElement.click();
        incrementMinute.nativeElement.click();
        incrementSecond.nativeElement.click();
        fixture.detectChanges();
        expect(hourPicker.children[2].nativeElement.textContent).toEqual('3');
        expect(minutePicker.children[2].nativeElement.textContent).toEqual('3');
        expect(secondPicker.children[2].nativeElement.textContent).toEqual('3');
        expect(calendar.currentHour).toEqual(3);
        expect(calendar.currentMinute).toEqual(3);
        expect(calendar.currentSecond).toEqual(3);
        decrementHour.nativeElement.click();
        decrementMinute.nativeElement.click();
        decrementSecond.nativeElement.click();
        fixture.detectChanges();
        expect(hourPicker.children[2].nativeElement.textContent).toEqual('22');
        expect(minutePicker.children[2].nativeElement.textContent).toEqual('58');
        expect(secondPicker.children[2].nativeElement.textContent).toEqual('58');
        expect(calendar.currentHour).toEqual(22);
        expect(calendar.currentMinute).toEqual(58);
        expect(calendar.currentSecond).toEqual(58);
    });
    it('should change showOnFocus', function () {
        calendar.showOnFocus = false;
        var showOverlaySpy = spyOn(calendar, 'showOverlay').and.callThrough();
        var onOverlayAnimationStartSpy = spyOn(calendar, 'onOverlayAnimationStart').and.callThrough();
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-inputtext'));
        var focusEvent = new Event('focus');
        inputEl.nativeElement.click();
        inputEl.nativeElement.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var panelEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker'));
        expect(showOverlaySpy).not.toHaveBeenCalled();
        expect(onOverlayAnimationStartSpy).not.toHaveBeenCalled();
        expect(calendar.overlayVisible).toBeUndefined();
        expect(panelEl).toBeFalsy();
    });
    it('should change dataType', function () {
        var date = new Date(2017, 8, 23, 11, 12, 21);
        calendar.defaultDate = date;
        jasmine.clock().mockDate(date);
        calendar.dataType = 'string';
        var formatDateTimeSpy = spyOn(calendar, 'formatDateTime').and.callThrough();
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-inputtext'));
        var focusEvent = new Event('focus');
        inputEl.nativeElement.click();
        inputEl.nativeElement.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var datesContainer = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-calendar-container'));
        var dates = datesContainer.queryAll(platform_browser_1.By.css('a'));
        dates[7].nativeElement.click();
        fixture.detectChanges();
        expect(formatDateTimeSpy).toHaveBeenCalled();
        expect(calendar.dataType).toEqual("string");
    });
    it('should single select ', function () {
        var date = new Date(2017, 8, 23);
        calendar.defaultDate = date;
        jasmine.clock().mockDate(date);
        var onDateSelectSpy = spyOn(calendar, 'onDateSelect').and.callThrough();
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-inputtext'));
        var focusEvent = new Event('focus');
        inputEl.nativeElement.click();
        inputEl.nativeElement.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var datesContainer = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-calendar-container'));
        var dates = datesContainer.queryAll(platform_browser_1.By.css('a'));
        dates[7].nativeElement.click();
        fixture.detectChanges();
        var pickedDate = new Date(2017, 8, 8);
        expect(calendar.value).toEqual(pickedDate);
        expect(onDateSelectSpy).toHaveBeenCalled();
    });
    it('should change maxDateCount ', function () {
        var date = new Date(2017, 8, 23);
        calendar.defaultDate = date;
        jasmine.clock().mockDate(date);
        var onDateSelectSpy = spyOn(calendar, 'onDateSelect').and.callThrough();
        calendar.maxDateCount = 2;
        calendar.selectionMode = "multiple";
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-inputtext'));
        var focusEvent = new Event('focus');
        inputEl.nativeElement.click();
        inputEl.nativeElement.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var datesContainer = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-calendar-container'));
        var dates = datesContainer.queryAll(platform_browser_1.By.css('a'));
        dates[7].nativeElement.click();
        dates[9].nativeElement.click();
        dates[11].nativeElement.click();
        fixture.detectChanges();
        expect(onDateSelectSpy).toHaveBeenCalled();
        expect(calendar.value.length).toEqual(2);
    });
    it('should disabled(inline false)', function () {
        calendar.disabled = true;
        calendar.showIcon = true;
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input'));
        var buttonEl = fixture.debugElement.query(platform_browser_1.By.css('button'));
        expect(buttonEl.nativeElement.className).toContain('ui-state-disabled');
        expect(buttonEl.nativeElement.disabled).toEqual(true);
        expect(inputEl.nativeElement.disabled).toEqual(true);
    });
    it('should disabled(inline true)', function () {
        calendar.disabled = true;
        calendar.inline = true;
        fixture.detectChanges();
        var datePicker = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker'));
        expect(datePicker.nativeElement.className).toContain("ui-state-disabled");
        var incrementYearSpy = spyOn(calendar, 'incrementYear').and.callThrough();
        var decrementYearSpy = spyOn(calendar, 'decrementYear').and.callThrough();
        var createMonthsSpy = spyOn(calendar, 'createMonths').and.callThrough();
        var preMonthEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-prev'));
        preMonthEl.nativeElement.click();
        var nextMonthEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-next'));
        nextMonthEl.nativeElement.click();
        fixture.detectChanges();
        expect(incrementYearSpy).not.toHaveBeenCalled();
        expect(decrementYearSpy).not.toHaveBeenCalled();
        expect(createMonthsSpy).not.toHaveBeenCalled();
        var calendarContainer = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-calendar-container'));
        var sampleDateEls = calendarContainer.queryAll(platform_browser_1.By.css('a'));
        var updateInputfieldSpy = spyOn(calendar, 'updateInputfield').and.callThrough();
        var selectDateSpy = spyOn(calendar, 'selectDate').and.callThrough();
        var updateModelSpy = spyOn(calendar, 'updateModel').and.callThrough();
        sampleDateEls[7].nativeElement.click();
        fixture.detectChanges();
        expect(updateInputfieldSpy).not.toHaveBeenCalled();
        expect(createMonthsSpy).not.toHaveBeenCalled();
        expect(selectDateSpy).not.toHaveBeenCalled();
        expect(updateModelSpy).not.toHaveBeenCalled();
    });
    it('should listen onBlur', function () {
        fixture.detectChanges();
        var blurValue;
        calendar.onBlur.subscribe(function (value) { return blurValue = value; });
        var onInputBlurSpy = spyOn(calendar, 'onInputBlur').and.callThrough();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-inputtext'));
        var focusEvent = new Event('focus');
        var blurEvent = new Event('blur');
        inputEl.nativeElement.click();
        inputEl.nativeElement.dispatchEvent(focusEvent);
        fixture.detectChanges();
        inputEl.nativeElement.dispatchEvent(blurEvent);
        fixture.detectChanges();
        expect(blurValue).toBeTruthy();
        expect(blurValue.type).toEqual('blur');
        expect(onInputBlurSpy).toHaveBeenCalled();
    });
    it('should change readonlyInput', function () {
        calendar.readonlyInput = true;
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input'));
        expect(inputEl.nativeElement.readOnly).toEqual(true);
    });
    it('should change selectOtherMonths', function () {
        var date = new Date(2017, 8, 23);
        calendar.defaultDate = date;
        jasmine.clock().mockDate(date);
        calendar.selectOtherMonths = true;
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-inputtext'));
        var focusEvent = new Event('focus');
        inputEl.nativeElement.click();
        inputEl.nativeElement.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var datesContainer = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-calendar-container'));
        var dates = datesContainer.queryAll(platform_browser_1.By.css('a'));
        expect(dates.length).toEqual(42);
        dates[0].nativeElement.click();
        fixture.detectChanges();
        expect(calendar.currentMonth).toEqual(7);
    });
    it('should change showOtherMonths', function () {
        calendar.showOtherMonths = false;
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-inputtext'));
        var focusEvent = new Event('focus');
        inputEl.nativeElement.click();
        inputEl.nativeElement.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var datesContainer = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-calendar-container'));
        var dates = datesContainer.queryAll(platform_browser_1.By.css('a'));
        var otherMonthDates = datesContainer.queryAll(platform_browser_1.By.css('.ui-datepicker-other-month'));
        for (var _i = 0, otherMonthDates_1 = otherMonthDates; _i < otherMonthDates_1.length; _i++) {
            var otherMonthDate = otherMonthDates_1[_i];
            expect(otherMonthDate.children.length).toEqual(0);
            expect(otherMonthDate.children).toEqual([]);
        }
    });
    it('should change selectionMode', function () {
        var date = new Date(2017, 8, 23);
        calendar.defaultDate = date;
        jasmine.clock().mockDate(date);
        calendar.selectionMode = 'range';
        calendar.showTime = true;
        calendar.showSeconds = true;
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-inputtext'));
        var focusEvent = new Event('focus');
        inputEl.nativeElement.click();
        inputEl.nativeElement.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var datesContainer = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-calendar-container'));
        var dates = datesContainer.queryAll(platform_browser_1.By.css('a'));
        dates[0].nativeElement.click();
        dates[5].nativeElement.click();
        fixture.detectChanges();
        expect(calendar.value.length).toEqual(2);
    });
    it('should change selectionMode (range max date first pick)', function () {
        var date = new Date(2017, 8, 23);
        calendar.defaultDate = date;
        jasmine.clock().mockDate(date);
        calendar.selectionMode = 'range';
        calendar.showTime = true;
        calendar.showSeconds = true;
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-inputtext'));
        var focusEvent = new Event('focus');
        inputEl.nativeElement.click();
        inputEl.nativeElement.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var datesContainer = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-calendar-container'));
        var dates = datesContainer.queryAll(platform_browser_1.By.css('a'));
        dates[5].nativeElement.click();
        fixture.detectChanges();
        dates[0].nativeElement.click();
        fixture.detectChanges();
        expect(calendar.value).toBeTruthy();
        expect(calendar.value.length).toEqual(2);
        expect(calendar.value[1]).toBeNull();
    });
    it('should change selectionMode (range three times pick)', function () {
        var date = new Date(2017, 8, 23);
        calendar.defaultDate = date;
        jasmine.clock().mockDate(date);
        calendar.selectionMode = 'range';
        calendar.showTime = true;
        calendar.showSeconds = true;
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-inputtext'));
        var focusEvent = new Event('focus');
        inputEl.nativeElement.click();
        inputEl.nativeElement.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var datesContainer = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-calendar-container'));
        var dates = datesContainer.queryAll(platform_browser_1.By.css('a'));
        dates[0].nativeElement.click();
        fixture.detectChanges();
        dates[5].nativeElement.click();
        fixture.detectChanges();
        dates[8].nativeElement.click();
        fixture.detectChanges();
        expect(calendar.value).toBeTruthy();
        expect(calendar.value.length).toEqual(2);
        expect(calendar.value[1]).toBeNull();
    });
    it('should change keepInvalid', function () {
        calendar.keepInvalid = true;
        fixture.detectChanges();
        var updateInputfieldSpy = spyOn(calendar, 'updateInputfield').and.callThrough();
        var onModelTouchedSpy = spyOn(calendar, 'onModelTouched').and.callThrough();
        var onInputBlurSpy = spyOn(calendar, 'onInputBlur').and.callThrough();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-inputtext'));
        var focusEvent = new Event('focus');
        var blurEvent = new Event('blur');
        inputEl.nativeElement.click();
        inputEl.nativeElement.dispatchEvent(focusEvent);
        fixture.detectChanges();
        inputEl.nativeElement.dispatchEvent(blurEvent);
        fixture.detectChanges();
        expect(onInputBlurSpy).toHaveBeenCalled();
        expect(updateInputfieldSpy).not.toHaveBeenCalled();
        expect(onModelTouchedSpy).toHaveBeenCalled();
    });
    it('should change appendto', function () {
        calendar.appendTo = "body";
        var date = new Date(2017, 8, 23);
        calendar.defaultDate = date;
        jasmine.clock().mockDate(date);
        calendar.showTime = true;
        calendar.showSeconds = true;
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-inputtext'));
        var focusEvent = new Event('focus');
        var blurEvent = new Event('blur');
        inputEl.nativeElement.click();
        inputEl.nativeElement.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var datesContainer = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-calendar-container'));
        var dates = datesContainer.queryAll(platform_browser_1.By.css('a'));
        dates[0].nativeElement.click();
        fixture.detectChanges();
        expect(calendar.value).toBeTruthy();
    });
    it('should use required', function () {
        calendar.required = true;
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-inputtext'));
        var focusEvent = new Event('focus');
        inputEl.nativeElement.click();
        inputEl.nativeElement.dispatchEvent(focusEvent);
        fixture.detectChanges();
        expect(inputEl.nativeElement.required).toEqual(true);
    });
    it('should change hideOnDateTimeSelect', testing_1.fakeAsync(function () {
        calendar.hideOnDateTimeSelect = true;
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-inputtext'));
        var focusEvent = new Event('focus');
        inputEl.nativeElement.click();
        inputEl.nativeElement.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var datesContainer = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-calendar-container'));
        var dates = datesContainer.queryAll(platform_browser_1.By.css('a'));
        dates[0].nativeElement.click();
        testing_1.tick(150);
        fixture.detectChanges();
        expect(calendar.overlayVisible).toEqual(false);
    }));
    it('should be next year', function () {
        var date = new Date(2017, 11, 23);
        calendar.defaultDate = date;
        jasmine.clock().mockDate(date);
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var navForwardSpy = spyOn(calendar, 'navForward').and.callThrough();
        var monthEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-month'));
        expect(monthEl.nativeElement.textContent).toEqual(calendar.locale.monthNames[calendar.currentMonth]);
        var nextMonthEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-next'));
        nextMonthEl.nativeElement.click();
        fixture.detectChanges();
        var currentMonthEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-month'));
        expect(currentMonthEl.nativeElement.textContent).toEqual("January");
        expect(calendar.currentMonth).toEqual(0);
        expect(calendar.currentYear).toEqual(2018);
        expect(navForwardSpy).toHaveBeenCalled();
    });
    it('should be previous year', function () {
        var date = new Date(2017, 0, 23);
        calendar.defaultDate = date;
        jasmine.clock().mockDate(date);
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var navBackwardSpy = spyOn(calendar, 'navBackward').and.callThrough();
        var monthEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-month'));
        expect(monthEl.nativeElement.textContent).toEqual(calendar.locale.monthNames[calendar.currentMonth]);
        var prevMonthEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-prev'));
        prevMonthEl.nativeElement.click();
        fixture.detectChanges();
        var currentMonthEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-month'));
        expect(currentMonthEl.nativeElement.textContent).toEqual("December");
        expect(calendar.currentMonth).toEqual(11);
        expect(calendar.currentYear).toEqual(2016);
        expect(navBackwardSpy).toHaveBeenCalled();
    });
    it('should change yearRange', function () {
        calendar.yearRange = "2000:2019";
        calendar.dateFormat = "mm/yy";
        calendar.yearNavigator = true;
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var yearSelectEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-year'));
        var yearsEls = yearSelectEl.queryAll(platform_browser_1.By.css('option'));
        expect(yearsEls.length).toEqual(20);
        expect(yearsEls[19].nativeElement.textContent).toEqual("2019");
    });
    it('should change tabindex', function () {
        calendar.tabindex = 5;
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input'));
        expect(inputEl.nativeElement.tabIndex).toEqual(5);
    });
    it('should be next year', function () {
        var date = new Date(2017, 11, 23);
        calendar.defaultDate = date;
        jasmine.clock().mockDate(date);
        calendar.yearNavigator = true;
        calendar.monthNavigator = true;
        calendar.yearRange = "2000:2030";
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var nextMonthEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-next'));
        nextMonthEl.nativeElement.click();
        fixture.detectChanges();
        expect(calendar.currentMonth).toEqual(0);
        expect(calendar.currentYear).toEqual(2018);
    });
    it('should be previous year', function () {
        var date = new Date(2017, 0, 23);
        calendar.defaultDate = date;
        jasmine.clock().mockDate(date);
        calendar.yearNavigator = true;
        calendar.monthNavigator = true;
        calendar.yearRange = "2000:2030";
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var prevMonthEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-prev'));
        prevMonthEl.nativeElement.click();
        fixture.detectChanges();
        expect(calendar.currentMonth).toEqual(11);
        expect(calendar.currentYear).toEqual(2016);
    });
    it('should select range (touchUI)', function () {
        var date = new Date(2017, 2, 12);
        calendar.defaultDate = date;
        jasmine.clock().mockDate(date);
        calendar.touchUI = true;
        calendar.selectionMode = "range";
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var panelEl = fixture.debugElement.query(platform_browser_1.By.css('div')).nativeElement;
        var containerEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-calendar-container'));
        var firstDayEl = containerEl.query(platform_browser_1.By.css('a')).nativeElement;
        var thirdDayEl = containerEl.queryAll(platform_browser_1.By.css('a'))[2].nativeElement;
        expect(panelEl.className).toContain("ui-datepicker-touch-ui");
        firstDayEl.click();
        fixture.detectChanges();
        thirdDayEl.click();
        fixture.detectChanges();
        expect(calendar.overlayVisible).toEqual(true);
        expect(calendar.value.length).toEqual(2);
    });
    it('should select range (touchUI third times)', function () {
        var date = new Date(2017, 2, 12);
        calendar.defaultDate = date;
        jasmine.clock().mockDate(date);
        calendar.touchUI = true;
        calendar.selectionMode = "multiple";
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var panelEl = fixture.debugElement.query(platform_browser_1.By.css('div')).nativeElement;
        var containerEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-calendar-container'));
        var firstDayEl = containerEl.query(platform_browser_1.By.css('a')).nativeElement;
        var secondDayEl = containerEl.queryAll(platform_browser_1.By.css('a'))[1].nativeElement;
        var thirdDayEl = containerEl.queryAll(platform_browser_1.By.css('a'))[2].nativeElement;
        expect(panelEl.className).toContain("ui-datepicker-touch-ui");
        firstDayEl.click();
        fixture.detectChanges();
        thirdDayEl.click();
        fixture.detectChanges();
        secondDayEl.click();
        fixture.detectChanges();
        expect(calendar.overlayVisible).toEqual(true);
        expect(calendar.value.length).toEqual(3);
    });
    it('should timeonly with touchUI', function () {
        calendar.timeOnly = true;
        calendar.touchUI = true;
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var defaultHour = calendar.currentHour;
        var defaultMinute = calendar.currentMinute;
        var timers = fixture.debugElement.query(platform_browser_1.By.css('.ui-timepicker')).queryAll(platform_browser_1.By.css('div'));
        var hourPicker = timers[0];
        var minutePicker = timers[2];
        var incrementHourEl = hourPicker.children[0];
        var decrementHourEl = hourPicker.children[3];
        var incrementMinuteEl = minutePicker.children[0];
        var decrementMinuteEl = minutePicker.children[3];
        incrementHourEl.nativeElement.click();
        decrementHourEl.nativeElement.click();
        decrementHourEl.nativeElement.click();
        decrementHourEl.nativeElement.click();
        incrementMinuteEl.nativeElement.click();
        decrementMinuteEl.nativeElement.click();
        decrementMinuteEl.nativeElement.click();
        decrementMinuteEl.nativeElement.click();
        fixture.detectChanges();
        expect(hourPicker.queryAll(platform_browser_1.By.css('span'))[2].nativeElement.textContent).not.toEqual(defaultHour.toString());
        expect(minutePicker.queryAll(platform_browser_1.By.css('span'))[2].nativeElement.textContent).not.toEqual(defaultMinute.toString());
        expect(hourPicker.queryAll(platform_browser_1.By.css('span'))[2].nativeElement.textContent).toEqual('22');
        expect(minutePicker.queryAll(platform_browser_1.By.css('span'))[2].nativeElement.textContent).toEqual('58');
        expect(calendar.currentHour).toEqual(22);
        expect(calendar.currentMinute).toEqual(58);
    });
    it('should call navForward and pick the next year', function () {
        fixture.detectChanges();
        calendar.view = "month";
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        var incrementYearSpy = spyOn(calendar, 'incrementYear').and.callThrough();
        var decrementYearSpy = spyOn(calendar, 'decrementYear').and.callThrough();
        fixture.detectChanges();
        var navForwardEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-next'));
        var navBackwardEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-prev'));
        navForwardEl.nativeElement.click();
        fixture.detectChanges();
        expect(incrementYearSpy).toHaveBeenCalled();
        navBackwardEl.nativeElement.click();
        fixture.detectChanges();
        expect(decrementYearSpy).toHaveBeenCalled();
    });
    it('should call navForward and go to out of year range(increment)', function () {
        fixture.detectChanges();
        calendar.view = "month";
        calendar.currentYear = 2018;
        calendar.yearRange = (calendar.currentYear - 1).toString() + ":" + (calendar.currentYear + 1).toString();
        calendar.yearNavigator = true;
        calendar.yearOptions = [2017, 2018];
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        var incrementYearSpy = spyOn(calendar, 'incrementYear').and.callThrough();
        var decrementYearSpy = spyOn(calendar, 'decrementYear').and.callThrough();
        var populateYearOptionsSpy = spyOn(calendar, 'populateYearOptions').and.callThrough();
        fixture.detectChanges();
        var navForwardEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-next'));
        var navBackwardEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-prev'));
        navForwardEl.nativeElement.click();
        fixture.detectChanges();
        expect(calendar.yearOptions.length).toEqual(2);
        expect(calendar.yearOptions[0]).toEqual(2018);
        expect(calendar.yearOptions[1]).toEqual(2019);
        expect(calendar.yearOptions[1]).toEqual(calendar.currentYear);
        expect(incrementYearSpy).toHaveBeenCalled();
        expect(populateYearOptionsSpy).toHaveBeenCalled();
    });
    it('should call navForward and go to out of year range (decrement)', function () {
        fixture.detectChanges();
        calendar.view = "month";
        calendar.currentYear = 2017;
        calendar.yearRange = (calendar.currentYear - 1).toString() + ":" + (calendar.currentYear + 1).toString();
        calendar.yearNavigator = true;
        calendar.yearOptions = [2017, 2018];
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        var decrementYearSpy = spyOn(calendar, 'decrementYear').and.callThrough();
        var populateYearOptionsSpy = spyOn(calendar, 'populateYearOptions').and.callThrough();
        fixture.detectChanges();
        var navBackwardEl = fixture.debugElement.query(platform_browser_1.By.css('.ui-datepicker-prev'));
        navBackwardEl.nativeElement.click();
        fixture.detectChanges();
        expect(calendar.yearOptions.length).toEqual(2);
        expect(calendar.yearOptions[0]).toEqual(2016);
        expect(calendar.yearOptions[0]).toEqual(calendar.currentYear);
        expect(calendar.yearOptions[1]).toEqual(2017);
        expect(decrementYearSpy).toHaveBeenCalled();
        expect(populateYearOptionsSpy).toHaveBeenCalled();
    });
    it('should call onUserInput and return nothing', function () {
        var onUserInputSpy = spyOn(calendar, 'onUserInput');
        fixture.detectChanges();
        calendar.onUserInput(event);
        fixture.detectChanges();
        expect(onUserInputSpy).toHaveBeenCalled();
        expect(calendar.isKeydown).toBeUndefined();
        expect(calendar.filled).toBeUndefined();
    });
    it('should select time with keyboardEvent', function () {
        calendar.timeOnly = true;
        calendar.hourFormat = '12';
        fixture.detectChanges();
        var inputEl = fixture.debugElement.query(platform_browser_1.By.css('input')).nativeElement;
        var focusEvent = new Event('focus');
        inputEl.click();
        inputEl.dispatchEvent(focusEvent);
        fixture.detectChanges();
        var parseValueFromStringSpy = spyOn(calendar, 'parseValueFromString').and.callThrough();
        var onUserInputSpy = spyOn(calendar, 'onUserInput').and.callThrough();
        var event = { 'target': { 'value': '10:10 AM' } };
        calendar.onInputKeydown(event);
        fixture.detectChanges();
        calendar.onUserInput(event);
        fixture.detectChanges();
        expect(parseValueFromStringSpy).toHaveBeenCalled();
        expect(onUserInputSpy).toHaveBeenCalled();
        expect(calendar.currentHour).toEqual(10);
        expect(calendar.currentMinute).toEqual(10);
        expect(calendar.pm).toEqual(false);
    });
});
//# sourceMappingURL=calendar.spec.js.map